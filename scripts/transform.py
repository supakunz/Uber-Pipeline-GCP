import os
import pandas as pd
from extract import extract_data
# from pandasgui import show # ‡πÉ‡∏ä‡πâ‡πÅ‡∏™‡∏î‡∏á table

# Lib ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡∏ó‡∏≥ Visualizations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥ EDA
# import matplotlib.pyplot as plt
# import seaborn as sns

RAW_DATA_PATH = os.getenv("raw_data_path")
FINAL_DATA_PATH = os.getenv("final_data_path")

def transform_data():
   
  # df = pd.read_csv('../data/raw_uber_data.csv') # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡πÄ‡∏õ‡πá‡∏ô DataFrame
  
  # Path on docker
  df = pd.read_csv(RAW_DATA_PATH) # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• CSV ‡πÄ‡∏õ‡πá‡∏ô DataFrame
  # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô missing_uber_data.csv ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π data ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î

  # ------------- ‡∏ó‡∏≥ EDA(Exploratory Data Analysis) ‡∏Å‡πà‡∏≠‡∏ô Tranform Data -------------
  # ‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á EDA
  
  # 1.‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
  # print(df.head()) 
  # print(df.tail()) # ‡πÉ‡∏ä‡πâ df.head(), df.tail() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏ñ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ñ‡∏ß‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 
  # print(df.shape) # ‡πÉ‡∏ä‡πâ df.shape ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏ñ‡∏ß‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  # print(df.info()) # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó (data types) ‡πÅ‡∏•‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏´‡∏≤‡∏¢
  # print(df.describe()) # ‡πÉ‡∏ä‡πâ df.describe() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢, ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î, ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î, ‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢
  
  # 2.‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤ missing (‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢‡πÑ‡∏õ)
  # print(df.isnull().sum()) # ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ missing ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà
  # print(df[df.isnull().any(axis=1)]) # ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ rows ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡πà‡∏≤ null

  # 3.‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ (Outliers)
  # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Å‡∏£‡∏≤‡∏ü boxplot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö outliers ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡πà‡∏≤‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ï‡πà‡∏≤‡∏á ‡πÜ
  # ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ scatter plot ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ï‡πà‡∏≤‡∏á ‡πÜ
  # sns.boxplot(x=df['fare_amount'])
  # plt.show()

  #‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
  # outliers = df[(df['fare_amount'] < -30) | (df['fare_amount'] > 800)]
  # print(outliers)

  # 4.‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• (Data Distribution)
  # sns.histplot(df['column_name'])
  # sns.kdeplot(df['column_name'])
  # sns.scatterplot(x=df['Unnamed: 0'],y=df['total_amount'])
  # plt.show()

  # ** ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥ Tranform Data ‡πÑ‡∏î‡πâ

  # -----------------------------------------------------

  # ------------------- Tranform Data -------------------

  # ‡πÅ‡∏õ‡∏•‡∏á Type ‡∏Ç‡∏≠‡∏á Column ‡∏à‡∏≤‡∏Å timestamp ‡πÄ‡∏õ‡πá‡∏ô date ‡∏ó‡∏±‡πâ‡∏á 2 Column
  df['tpep_pickup_datetime'] = pd.to_datetime(df['tpep_pickup_datetime'])
  df['tpep_dropoff_datetime'] = pd.to_datetime(df['tpep_dropoff_datetime'])
   
  # print(df.dtypes) --> check type 
  # print(df.shape) --> check rows ‡πÅ‡∏•‡∏∞ columns
   
  df = df.drop_duplicates().reset_index(drop=True) # ‡∏•‡∏ö rows ‡∏ó‡∏µ‡πà‡∏°‡∏µ data ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ô
  # ‚úÖ reset_index(drop=True) ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£ ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á index ‡πÉ‡∏´‡∏°‡πà ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏à‡∏≤‡∏Å 0,1,2,... ‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö
  df['trip_id'] = df.index # ‡πÄ‡∏û‡∏¥‡πà‡∏° column trip_id ‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ö index

  # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÉ‡∏´‡∏°‡πà <datetime_dim>
  datetime_dim = df[['tpep_pickup_datetime','tpep_dropoff_datetime']].reset_index(drop=True)
  datetime_dim['tpep_pickup_datetime'] = datetime_dim['tpep_pickup_datetime']
  datetime_dim['pick_hour'] = datetime_dim['tpep_pickup_datetime'].dt.hour # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà ‡∏ä‡∏∑‡πà‡∏≠ pick_hour ‡πÇ‡∏î‡∏¢ .dt.hour ‚Üí ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (hour) ‡∏à‡∏≤‡∏Å‡∏Ñ‡πà‡∏≤ datetime
  datetime_dim['pick_day'] = datetime_dim['tpep_pickup_datetime'].dt.day
  datetime_dim['pick_month'] = datetime_dim['tpep_pickup_datetime'].dt.month
  datetime_dim['pick_year'] = datetime_dim['tpep_pickup_datetime'].dt.year
  datetime_dim['pick_weekday'] = datetime_dim['tpep_pickup_datetime'].dt.weekday

  datetime_dim['tpep_dropoff_datetime'] = datetime_dim['tpep_dropoff_datetime']
  datetime_dim['drop_hour'] = datetime_dim['tpep_dropoff_datetime'].dt.hour
  datetime_dim['drop_day'] = datetime_dim['tpep_dropoff_datetime'].dt.day
  datetime_dim['drop_month'] = datetime_dim['tpep_dropoff_datetime'].dt.month
  datetime_dim['drop_year'] = datetime_dim['tpep_dropoff_datetime'].dt.year
  datetime_dim['drop_weekday'] = datetime_dim['tpep_dropoff_datetime'].dt.weekday

  datetime_dim['datetime_id'] = datetime_dim.index

  # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
  datetime_dim = datetime_dim[['datetime_id', 'tpep_pickup_datetime', 'pick_hour', 'pick_day', 'pick_month', 'pick_year', 'pick_weekday',
                             'tpep_dropoff_datetime', 'drop_hour', 'drop_day', 'drop_month', 'drop_year', 'drop_weekday']]

  # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÉ‡∏´‡∏°‡πà <passenger_count_dim>
  passenger_count_dim = df[['passenger_count']].reset_index(drop=True)
  passenger_count_dim['passenger_count_id'] = passenger_count_dim.index
  passenger_count_dim = passenger_count_dim[['passenger_count_id','passenger_count']]
  
  # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÉ‡∏´‡∏°‡πà <trip_distance_dim>
  trip_distance_dim = df[['trip_distance']].reset_index(drop=True)
  trip_distance_dim['trip_distance_id'] = trip_distance_dim.index
  trip_distance_dim = trip_distance_dim[['trip_distance_id','trip_distance']]
  
  
  # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÉ‡∏´‡∏°‡πà <rate_code_dim>
  rate_code_dim = df[['RatecodeID']].reset_index(drop=True)
  rate_code_dim['rate_code_id'] = rate_code_dim.index
  
  # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary
  rate_code_type = {
    1:"Standard rate",
    2:"JFK",
    3:"Newark",
    4:"Nassau or Westchester",
    5:"Negotiated fare",
    6:"Group ride"
}
  # map dictionary ‡∏•‡∏á‡πÉ‡∏ô column rate_code_name
  rate_code_dim['rate_code_name'] = rate_code_dim['RatecodeID'].map(rate_code_type)
  # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
  rate_code_dim = rate_code_dim[['rate_code_id','RatecodeID','rate_code_name']]

  # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÉ‡∏´‡∏°‡πà <pickup_location_dim>
  pickup_location_dim = df[['pickup_longitude','pickup_latitude']].reset_index(drop=True)
  pickup_location_dim['pickup_location_id'] = pickup_location_dim.index # .index ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡∏°‡∏≤

  # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
  pickup_location_dim = pickup_location_dim[['pickup_location_id','pickup_latitude','pickup_longitude']]

  # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÉ‡∏´‡∏°‡πà <dropoff_location_dim>
  dropoff_location_dim = df[['dropoff_longitude','dropoff_latitude']].reset_index(drop=True)
  dropoff_location_dim['dropoff_location_id'] = dropoff_location_dim.index # .index ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏° index ‡∏°‡∏≤

  # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
  dropoff_location_dim = dropoff_location_dim[['dropoff_location_id','dropoff_latitude','dropoff_longitude']]
  
  # ‡∏™‡∏£‡πâ‡∏≤‡∏á DataFrame ‡πÉ‡∏´‡∏°‡πà <payment_type_dim>
  payment_type_dim = df[['payment_type']].reset_index(drop=True)
  payment_type_dim['payment_type_id'] = payment_type_dim.index

  # ‡∏™‡∏£‡πâ‡∏≤‡∏á dictionary
  payment_type_name = {
    1:"Credit card",
    2:"Cash",
    3:"No charge",
    4:"Dispute",
    5:"Unknown",
    6:"Voided trip"
  }
  # map dictionary ‡∏•‡∏á‡πÉ‡∏ô column payment_type_name
  payment_type_dim['payment_type_name'] = payment_type_dim['payment_type'].map(payment_type_name)
  
  # ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÉ‡∏´‡∏°‡πà
  payment_type_dim = payment_type_dim[['payment_type_id','payment_type','payment_type_name']]


  # ‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ‡∏°‡∏µ table --> 
  # datetime_dim, passenger_count_dim, trip_distance_dim, 
  # rate_code_dim, pickup_location_dim, dropoff_location_dim, payment_type_dim

  # ** ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£ Merge Table ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡πâ‡∏ß‡∏¢‡∏Å‡∏±‡∏ô **
  # Tip ! #Merge
  """ 
  üîπ ‡∏™‡∏£‡∏∏‡∏õ how= ‡πÉ‡∏ô pd.merge()
  Join Type	‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢
  inner	‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô INNER JOIN ‡πÉ‡∏ô SQL)
  left	‡πÄ‡∏≠‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å‡∏ã‡πâ‡∏≤‡∏¢ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô LEFT JOIN)
  right	‡πÄ‡∏≠‡∏≤‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å‡∏Ç‡∏ß‡∏≤ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô RIGHT JOIN)
  outer	‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡πÅ‡∏ñ‡∏ß‡∏à‡∏≤‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏™‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô FULL OUTER JOIN)
  """
  # üîπ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô ‡πÉ‡∏ä‡πâ left_on= ‡πÅ‡∏•‡∏∞ right_on= -> ‡∏à‡∏∞‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏Ç‡∏≠‡∏á left_on ‡∏Å‡∏±‡∏ö right_on ‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
  # üîπ ‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πà on= -> ‡∏à‡∏∞‡∏£‡∏ß‡∏°‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏±‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  
  # how -> ‡∏Ñ‡πà‡∏≤ default ‡πÄ‡∏õ‡πá‡∏ô inner join ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î
  fact_table = df.merge(passenger_count_dim, left_on='trip_id', right_on='passenger_count_id', how='inner') \
               .merge(trip_distance_dim, left_on='trip_id', right_on='trip_distance_id') \
               .merge(rate_code_dim, left_on='trip_id', right_on='rate_code_id') \
               .merge(pickup_location_dim, left_on='trip_id', right_on='pickup_location_id') \
               .merge(dropoff_location_dim, left_on='trip_id', right_on='dropoff_location_id') \
               .merge(datetime_dim, left_on='trip_id', right_on='datetime_id') \
               .merge(payment_type_dim, left_on='trip_id', right_on='payment_type_id') \
               [['trip_id','VendorID','datetime_id','passenger_count_id','trip_distance_id','rate_code_id',
                 'store_and_fwd_flag','pickup_location_id','dropoff_location_id','payment_type_id','fare_amount',
                 'extra','mta_tax','tip_amount','tolls_amount','improvement_surcharge','total_amount'
                 ]]

  # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ä‡∏∑‡πà‡∏≠ cloumns ‡∏Ç‡∏≠‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  # print(payment_type_dim.columns)
  # Output => Index(['payment_type_id', 'payment_type', 'payment_type_name'], dtype='object')

  # print(fact_table.columns)
  # Output => Index(['trip_id', 'VendorID', 'datetime_id', 'passenger_count_id',
      # 'trip_distance_id', 'rate_code_id', 'store_and_fwd_flag',
      # 'pickup_location_id', 'dropoff_location_id', 'payment_type_id',
      # 'fare_amount', 'extra', 'mta_tax', 'tip_amount', 'tolls_amount',
      # 'improvement_surcharge', 'total_amount'],
      # dtype='object')

  # ‡πÉ‡∏ä‡πâ pandas GUI ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Table
  # show(fact_table)

  # Save ‡πÑ‡∏ü‡∏•‡πå CSV ‡πÑ‡∏õ‡∏ó‡∏µ‡πà transformed_data_path ("../data/transformed_uber_data.csv")
  # final_data_path = '../data/uber_data_final.csv'
  final_data_path = FINAL_DATA_PATH
  fact_table.to_csv(final_data_path, index=False)

  print(f"‚úÖ Tranform Data Successed!!")

